
cw_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000de  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008b7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000008e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000195  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000142  00000000  00000000  00000aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001b3  00000000  00000000  00000bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000110  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000087  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000f7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 56 00 	call	0xac	; 0xac <main>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SETUP_PWM>:
	
	sei();	// w³¹cznie przerwañ
}*/

void SETUP_PWM(){		
	TCCR0 |= (1 << WGM00); // zmiana trybu pracy na FastPWM
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << WGM01);
  72:	83 b7       	in	r24, 0x33	; 51
  74:	88 60       	ori	r24, 0x08	; 8
  76:	83 bf       	out	0x33, r24	; 51
	
	TCCR0 |= (1 << COM01); // ustawienie zachowania pinu OC
  78:	83 b7       	in	r24, 0x33	; 51
  7a:	80 62       	ori	r24, 0x20	; 32
  7c:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << COM00);
  7e:	83 b7       	in	r24, 0x33	; 51
  80:	8f 7e       	andi	r24, 0xEF	; 239
  82:	83 bf       	out	0x33, r24	; 51
	
	TCCR0 |= (1 << CS00); // ustawienie zegara
  84:	83 b7       	in	r24, 0x33	; 51
  86:	81 60       	ori	r24, 0x01	; 1
  88:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << CS01);
  8a:	83 b7       	in	r24, 0x33	; 51
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << CS02);
  90:	83 b7       	in	r24, 0x33	; 51
  92:	8b 7f       	andi	r24, 0xFB	; 251
  94:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = 0x10;
  96:	80 e1       	ldi	r24, 0x10	; 16
  98:	8c bf       	out	0x3c, r24	; 60
  9a:	08 95       	ret

0000009c <SET_PWM>:
}

void SET_PWM(int x){
	OCR0 = x % 256;
  9c:	90 78       	andi	r25, 0x80	; 128
  9e:	99 23       	and	r25, r25
  a0:	1c f4       	brge	.+6      	; 0xa8 <SET_PWM+0xc>
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	9f 6f       	ori	r25, 0xFF	; 255
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	8c bf       	out	0x3c, r24	; 60
  aa:	08 95       	ret

000000ac <main>:
}*/

int main(void)
{
	int i = 0;
	SETUP_PWM();
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <SETUP_PWM>
	
}*/

int main(void)
{
	int i = 0;
  b0:	c0 e0       	ldi	r28, 0x00	; 0
  b2:	d0 e0       	ldi	r29, 0x00	; 0
	SETUP_PWM();
	//SETUP_TIMEOUT(10);
    while(1)
    {
		DDRB |= (1 << PB3);
  b4:	bb 9a       	sbi	0x17, 3	; 23
		i++;
  b6:	ce 01       	movw	r24, r28
  b8:	01 96       	adiw	r24, 0x01	; 1
		i = i % 256;
  ba:	90 78       	andi	r25, 0x80	; 128
  bc:	99 23       	and	r25, r25
  be:	1c f4       	brge	.+6      	; 0xc6 <main+0x1a>
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	9f 6f       	ori	r25, 0xFF	; 255
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	ec 01       	movw	r28, r24
		SET_PWM(i);
  c8:	0e 94 4e 00 	call	0x9c	; 0x9c <SET_PWM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	83 ec       	ldi	r24, 0xC3	; 195
  ce:	99 e0       	ldi	r25, 0x09	; 9
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x24>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x2a>
  d6:	00 00       	nop
  d8:	ed cf       	rjmp	.-38     	; 0xb4 <main+0x8>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
