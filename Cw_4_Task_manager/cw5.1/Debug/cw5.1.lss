
cw5.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004e8  0000057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800060  00800060  0000057c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000cdf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000058  00000000  00000000  00000d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000250  00000000  00000000  00000d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000131  00000000  00000000  00000fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000019c  00000000  00000000  000010e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000013c  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000108  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000267  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  0000172f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 3b       	cpi	r26, 0xB1	; 177
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b2 01 	call	0x364	; 0x364 <main>
  74:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <schedule>:
Task tasks[MAX_TASKS];

uint8_t TASK_COUNT = 0;


void schedule(){
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <schedule+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <schedule+0x8>
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	
	// timer
	//TIMSK &= ~(1 << OCIE0);
	//TIMSK |= (1 << TOIE0);
	TIMSK |= (1 << OCIE0);
  88:	89 e5       	ldi	r24, 0x59	; 89
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	29 e5       	ldi	r18, 0x59	; 89
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	f9 01       	movw	r30, r18
  92:	20 81       	ld	r18, Z
  94:	22 60       	ori	r18, 0x02	; 2
  96:	fc 01       	movw	r30, r24
  98:	20 83       	st	Z, r18
	TIMSK &= ~(1 << TOIE0);
  9a:	89 e5       	ldi	r24, 0x59	; 89
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	29 e5       	ldi	r18, 0x59	; 89
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	f9 01       	movw	r30, r18
  a4:	20 81       	ld	r18, Z
  a6:	2e 7f       	andi	r18, 0xFE	; 254
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18
	TCCR0 |= (1 << WGM01);
  ac:	83 e5       	ldi	r24, 0x53	; 83
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	23 e5       	ldi	r18, 0x53	; 83
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	28 60       	ori	r18, 0x08	; 8
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
	TCCR0 &= ~(1 << WGM00);
  be:	83 e5       	ldi	r24, 0x53	; 83
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	23 e5       	ldi	r18, 0x53	; 83
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	f9 01       	movw	r30, r18
  c8:	20 81       	ld	r18, Z
  ca:	2f 7b       	andi	r18, 0xBF	; 191
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
	TCCR0 |= (1 << CS00);
  d0:	83 e5       	ldi	r24, 0x53	; 83
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	23 e5       	ldi	r18, 0x53	; 83
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	20 81       	ld	r18, Z
  dc:	21 60       	ori	r18, 0x01	; 1
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	TCCR0 |= (1 << CS01);
  e2:	83 e5       	ldi	r24, 0x53	; 83
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	23 e5       	ldi	r18, 0x53	; 83
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	20 81       	ld	r18, Z
  ee:	22 60       	ori	r18, 0x02	; 2
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
	TCCR0 &= ~(1 << CS02);
  f4:	83 e5       	ldi	r24, 0x53	; 83
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	23 e5       	ldi	r18, 0x53	; 83
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	20 81       	ld	r18, Z
 100:	2b 7f       	andi	r18, 0xFB	; 251
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
	
	OCR0 = 1000;
 106:	8c e5       	ldi	r24, 0x5C	; 92
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	28 ee       	ldi	r18, 0xE8	; 232
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
	
	//przerwania
	sei();
 110:	78 94       	sei
	
	Task * tsk;
	while( TASK_COUNT > 0){
 112:	66 c0       	rjmp	.+204    	; 0x1e0 <schedule+0x164>
		int i;
		tsk = 0;
 114:	1a 82       	std	Y+2, r1	; 0x02
 116:	19 82       	std	Y+1, r1	; 0x01
		for(i = 0; i < TASK_COUNT; i++){
 118:	1c 82       	std	Y+4, r1	; 0x04
 11a:	1b 82       	std	Y+3, r1	; 0x03
 11c:	42 c0       	rjmp	.+132    	; 0x1a2 <schedule+0x126>
			if(tasks[i].ready != NOT_READY){
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	9c 81       	ldd	r25, Y+4	; 0x04
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	8d 59       	subi	r24, 0x9D	; 157
 130:	9f 4f       	sbci	r25, 0xFF	; 255
 132:	fc 01       	movw	r30, r24
 134:	80 81       	ld	r24, Z
 136:	88 23       	and	r24, r24
 138:	79 f1       	breq	.+94     	; 0x198 <schedule+0x11c>
				if(tsk != 0){
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	9a 81       	ldd	r25, Y+2	; 0x02
 13e:	00 97       	sbiw	r24, 0x00	; 0
 140:	f9 f0       	breq	.+62     	; 0x180 <schedule+0x104>
					if(tsk->priority > tasks[i].priority){
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	9a 81       	ldd	r25, Y+2	; 0x02
 146:	fc 01       	movw	r30, r24
 148:	27 81       	ldd	r18, Z+7	; 0x07
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	9c 81       	ldd	r25, Y+4	; 0x04
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	88 59       	subi	r24, 0x98	; 152
 15c:	9f 4f       	sbci	r25, 0xFF	; 255
 15e:	fc 01       	movw	r30, r24
 160:	80 81       	ld	r24, Z
 162:	82 17       	cp	r24, r18
 164:	c8 f4       	brcc	.+50     	; 0x198 <schedule+0x11c>
						tsk = & tasks[i];
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	9c 81       	ldd	r25, Y+4	; 0x04
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	8f 59       	subi	r24, 0x9F	; 159
 178:	9f 4f       	sbci	r25, 0xFF	; 255
 17a:	9a 83       	std	Y+2, r25	; 0x02
 17c:	89 83       	std	Y+1, r24	; 0x01
 17e:	0c c0       	rjmp	.+24     	; 0x198 <schedule+0x11c>
					}
				}else{
					tsk = & tasks[i];
 180:	8b 81       	ldd	r24, Y+3	; 0x03
 182:	9c 81       	ldd	r25, Y+4	; 0x04
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	8f 59       	subi	r24, 0x9F	; 159
 192:	9f 4f       	sbci	r25, 0xFF	; 255
 194:	9a 83       	std	Y+2, r25	; 0x02
 196:	89 83       	std	Y+1, r24	; 0x01
	
	Task * tsk;
	while( TASK_COUNT > 0){
		int i;
		tsk = 0;
		for(i = 0; i < TASK_COUNT; i++){
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	9c 81       	ldd	r25, Y+4	; 0x04
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	9c 83       	std	Y+4, r25	; 0x04
 1a0:	8b 83       	std	Y+3, r24	; 0x03
 1a2:	80 91 60 00 	lds	r24, 0x0060
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	9c 81       	ldd	r25, Y+4	; 0x04
 1ae:	82 17       	cp	r24, r18
 1b0:	93 07       	cpc	r25, r19
 1b2:	0c f4       	brge	.+2      	; 0x1b6 <schedule+0x13a>
 1b4:	b4 cf       	rjmp	.-152    	; 0x11e <schedule+0xa2>
				}else{
					tsk = & tasks[i];
				}
			}
		}
		if(tsk != 0){
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	89 f0       	breq	.+34     	; 0x1e0 <schedule+0x164>
			tsk->ready--;
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	9a 81       	ldd	r25, Y+2	; 0x02
 1c2:	fc 01       	movw	r30, r24
 1c4:	82 81       	ldd	r24, Z+2	; 0x02
 1c6:	28 2f       	mov	r18, r24
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	9a 81       	ldd	r25, Y+2	; 0x02
 1ce:	fc 01       	movw	r30, r24
 1d0:	22 83       	std	Z+2, r18	; 0x02
			tsk->tsk();
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	9a 81       	ldd	r25, Y+2	; 0x02
 1d6:	fc 01       	movw	r30, r24
 1d8:	80 81       	ld	r24, Z
 1da:	91 81       	ldd	r25, Z+1	; 0x01
 1dc:	fc 01       	movw	r30, r24
 1de:	09 95       	icall
	
	//przerwania
	sei();
	
	Task * tsk;
	while( TASK_COUNT > 0){
 1e0:	80 91 60 00 	lds	r24, 0x0060
 1e4:	88 23       	and	r24, r24
 1e6:	09 f0       	breq	.+2      	; 0x1ea <schedule+0x16e>
 1e8:	95 cf       	rjmp	.-214    	; 0x114 <schedule+0x98>
		if(tsk != 0){
			tsk->ready--;
			tsk->tsk();
		}
	}
}
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <AddTask>:

void AddTask(TASK_PTR tsk, uint16_t interval, uint8_t priority){
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <AddTask+0x6>
 1fe:	00 d0       	rcall	.+0      	; 0x200 <AddTask+0x8>
 200:	1f 92       	push	r1
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	9a 83       	std	Y+2, r25	; 0x02
 208:	89 83       	std	Y+1, r24	; 0x01
 20a:	7c 83       	std	Y+4, r23	; 0x04
 20c:	6b 83       	std	Y+3, r22	; 0x03
 20e:	4d 83       	std	Y+5, r20	; 0x05
	if(TASK_COUNT + 1 < MAX_TASKS){
 210:	80 91 60 00 	lds	r24, 0x0060
 214:	88 2f       	mov	r24, r24
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	8a 30       	cpi	r24, 0x0A	; 10
 21c:	91 05       	cpc	r25, r1
 21e:	0c f0       	brlt	.+2      	; 0x222 <AddTask+0x2a>
 220:	55 c0       	rjmp	.+170    	; 0x2cc <AddTask+0xd4>
		tasks[TASK_COUNT].tsk = tsk;
 222:	80 91 60 00 	lds	r24, 0x0060
 226:	88 2f       	mov	r24, r24
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	8f 59       	subi	r24, 0x9F	; 159
 238:	9f 4f       	sbci	r25, 0xFF	; 255
 23a:	29 81       	ldd	r18, Y+1	; 0x01
 23c:	3a 81       	ldd	r19, Y+2	; 0x02
 23e:	fc 01       	movw	r30, r24
 240:	31 83       	std	Z+1, r19	; 0x01
 242:	20 83       	st	Z, r18
		//tasks[TASK_COUNT].ready = NOT_READY;
		tasks[TASK_COUNT].ready = 1;
 244:	80 91 60 00 	lds	r24, 0x0060
 248:	88 2f       	mov	r24, r24
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	8d 59       	subi	r24, 0x9D	; 157
 25a:	9f 4f       	sbci	r25, 0xFF	; 255
 25c:	21 e0       	ldi	r18, 0x01	; 1
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
		tasks[TASK_COUNT].toGo = 1;
 262:	80 91 60 00 	lds	r24, 0x0060
 266:	88 2f       	mov	r24, r24
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	8a 59       	subi	r24, 0x9A	; 154
 278:	9f 4f       	sbci	r25, 0xFF	; 255
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	fc 01       	movw	r30, r24
 280:	31 83       	std	Z+1, r19	; 0x01
 282:	20 83       	st	Z, r18
		tasks[TASK_COUNT].priority = priority;
 284:	80 91 60 00 	lds	r24, 0x0060
 288:	88 2f       	mov	r24, r24
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	88 59       	subi	r24, 0x98	; 152
 29a:	9f 4f       	sbci	r25, 0xFF	; 255
 29c:	2d 81       	ldd	r18, Y+5	; 0x05
 29e:	fc 01       	movw	r30, r24
 2a0:	20 83       	st	Z, r18
		tasks[TASK_COUNT++].interval = interval;
 2a2:	40 91 60 00 	lds	r20, 0x0060
 2a6:	84 2f       	mov	r24, r20
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	8c 59       	subi	r24, 0x9C	; 156
 2b8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ba:	2b 81       	ldd	r18, Y+3	; 0x03
 2bc:	3c 81       	ldd	r19, Y+4	; 0x04
 2be:	fc 01       	movw	r30, r24
 2c0:	31 83       	std	Z+1, r19	; 0x01
 2c2:	20 83       	st	Z, r18
 2c4:	84 2f       	mov	r24, r20
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 60 00 	sts	0x0060, r24
		
	}
}
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <Set0>:


void Set0(){
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
	PORTA ^= 1<<0;
 2e4:	8b e3       	ldi	r24, 0x3B	; 59
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	2b e3       	ldi	r18, 0x3B	; 59
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	f9 01       	movw	r30, r18
 2ee:	30 81       	ld	r19, Z
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	23 27       	eor	r18, r19
 2f4:	fc 01       	movw	r30, r24
 2f6:	20 83       	st	Z, r18
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <Set1>:

void Set1(){
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
	PORTA ^= 1<<1;
 306:	8b e3       	ldi	r24, 0x3B	; 59
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	2b e3       	ldi	r18, 0x3B	; 59
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	f9 01       	movw	r30, r18
 310:	30 81       	ld	r19, Z
 312:	22 e0       	ldi	r18, 0x02	; 2
 314:	23 27       	eor	r18, r19
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <Set2>:

void Set2(){
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
	PORTA ^= 1<<2;
 328:	8b e3       	ldi	r24, 0x3B	; 59
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	2b e3       	ldi	r18, 0x3B	; 59
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	f9 01       	movw	r30, r18
 332:	30 81       	ld	r19, Z
 334:	24 e0       	ldi	r18, 0x04	; 4
 336:	23 27       	eor	r18, r19
 338:	fc 01       	movw	r30, r24
 33a:	20 83       	st	Z, r18
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <Set3>:

void Set3(){
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
	PORTA ^= 1<<3;
 34a:	8b e3       	ldi	r24, 0x3B	; 59
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	2b e3       	ldi	r18, 0x3B	; 59
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	f9 01       	movw	r30, r18
 354:	30 81       	ld	r19, Z
 356:	28 e0       	ldi	r18, 0x08	; 8
 358:	23 27       	eor	r18, r19
 35a:	fc 01       	movw	r30, r24
 35c:	20 83       	st	Z, r18
}
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <main>:


int main(void)
{
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
 36c:	8a e3       	ldi	r24, 0x3A	; 58
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	2f ef       	ldi	r18, 0xFF	; 255
 372:	fc 01       	movw	r30, r24
 374:	20 83       	st	Z, r18
	//PORTA = 0b11111111;
	PORTA = 0b00000000;
 376:	8b e3       	ldi	r24, 0x3B	; 59
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	fc 01       	movw	r30, r24
 37c:	10 82       	st	Z, r1
	
	AddTask(Set0, 1, 0);
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	8e e6       	ldi	r24, 0x6E	; 110
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <AddTask>
	AddTask(Set1, 2, 1);
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	62 e0       	ldi	r22, 0x02	; 2
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	8f e7       	ldi	r24, 0x7F	; 127
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <AddTask>
	AddTask(Set2, 3, 2);
 39a:	42 e0       	ldi	r20, 0x02	; 2
 39c:	63 e0       	ldi	r22, 0x03	; 3
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	80 e9       	ldi	r24, 0x90	; 144
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <AddTask>
	AddTask(Set3, 4, 3);
 3a8:	43 e0       	ldi	r20, 0x03	; 3
 3aa:	64 e0       	ldi	r22, 0x04	; 4
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	81 ea       	ldi	r24, 0xA1	; 161
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <AddTask>
		
	//}
	
    schedule();
 3b6:	0e 94 3e 00 	call	0x7c	; 0x7c <schedule>
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	90 e0       	ldi	r25, 0x00	; 0
}
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <__vector_19>:


// co 64 ocr 250, ccc
// przepenienie

ISR(TIMER0_COMP_vect){
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	00 90 5f 00 	lds	r0, 0x005F
 3cc:	0f 92       	push	r0
 3ce:	11 24       	eor	r1, r1
 3d0:	2f 93       	push	r18
 3d2:	3f 93       	push	r19
 3d4:	8f 93       	push	r24
 3d6:	9f 93       	push	r25
 3d8:	ef 93       	push	r30
 3da:	ff 93       	push	r31
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <__vector_19+0x1e>
 3e2:	1f 92       	push	r1
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
//ISR(TIMER0_OVF_vect){
	uint8_t i;
	Task * tsk;
	for(i = 0; i < TASK_COUNT; i++){
 3e8:	19 82       	std	Y+1, r1	; 0x01
 3ea:	65 c0       	rjmp	.+202    	; 0x4b6 <__stack+0x57>
		tsk = & tasks[i];
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	88 2f       	mov	r24, r24
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	8f 59       	subi	r24, 0x9F	; 159
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	9b 83       	std	Y+3, r25	; 0x03
 404:	8a 83       	std	Y+2, r24	; 0x02
		if(tsk->interval != NO_PERIODIC){
 406:	8a 81       	ldd	r24, Y+2	; 0x02
 408:	9b 81       	ldd	r25, Y+3	; 0x03
 40a:	fc 01       	movw	r30, r24
 40c:	83 81       	ldd	r24, Z+3	; 0x03
 40e:	94 81       	ldd	r25, Z+4	; 0x04
 410:	00 97       	sbiw	r24, 0x00	; 0
 412:	49 f1       	breq	.+82     	; 0x466 <__stack+0x7>
			tsk->toGo--;
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	9b 81       	ldd	r25, Y+3	; 0x03
 418:	fc 01       	movw	r30, r24
 41a:	85 81       	ldd	r24, Z+5	; 0x05
 41c:	96 81       	ldd	r25, Z+6	; 0x06
 41e:	9c 01       	movw	r18, r24
 420:	21 50       	subi	r18, 0x01	; 1
 422:	31 09       	sbc	r19, r1
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	9b 81       	ldd	r25, Y+3	; 0x03
 428:	fc 01       	movw	r30, r24
 42a:	36 83       	std	Z+6, r19	; 0x06
 42c:	25 83       	std	Z+5, r18	; 0x05
			if(tsk->toGo == 0){
 42e:	8a 81       	ldd	r24, Y+2	; 0x02
 430:	9b 81       	ldd	r25, Y+3	; 0x03
 432:	fc 01       	movw	r30, r24
 434:	85 81       	ldd	r24, Z+5	; 0x05
 436:	96 81       	ldd	r25, Z+6	; 0x06
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	d1 f5       	brne	.+116    	; 0x4b0 <__stack+0x51>
				tsk->toGo = tsk->interval;
 43c:	8a 81       	ldd	r24, Y+2	; 0x02
 43e:	9b 81       	ldd	r25, Y+3	; 0x03
 440:	fc 01       	movw	r30, r24
 442:	23 81       	ldd	r18, Z+3	; 0x03
 444:	34 81       	ldd	r19, Z+4	; 0x04
 446:	8a 81       	ldd	r24, Y+2	; 0x02
 448:	9b 81       	ldd	r25, Y+3	; 0x03
 44a:	fc 01       	movw	r30, r24
 44c:	36 83       	std	Z+6, r19	; 0x06
 44e:	25 83       	std	Z+5, r18	; 0x05
				tsk->ready++;
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	9b 81       	ldd	r25, Y+3	; 0x03
 454:	fc 01       	movw	r30, r24
 456:	82 81       	ldd	r24, Z+2	; 0x02
 458:	28 2f       	mov	r18, r24
 45a:	2f 5f       	subi	r18, 0xFF	; 255
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	9b 81       	ldd	r25, Y+3	; 0x03
 460:	fc 01       	movw	r30, r24
 462:	22 83       	std	Z+2, r18	; 0x02
 464:	25 c0       	rjmp	.+74     	; 0x4b0 <__stack+0x51>
			}
		}else if(tsk->toGo > 0){
 466:	8a 81       	ldd	r24, Y+2	; 0x02
 468:	9b 81       	ldd	r25, Y+3	; 0x03
 46a:	fc 01       	movw	r30, r24
 46c:	85 81       	ldd	r24, Z+5	; 0x05
 46e:	96 81       	ldd	r25, Z+6	; 0x06
 470:	00 97       	sbiw	r24, 0x00	; 0
 472:	f1 f0       	breq	.+60     	; 0x4b0 <__stack+0x51>
			tsk->toGo--;
 474:	8a 81       	ldd	r24, Y+2	; 0x02
 476:	9b 81       	ldd	r25, Y+3	; 0x03
 478:	fc 01       	movw	r30, r24
 47a:	85 81       	ldd	r24, Z+5	; 0x05
 47c:	96 81       	ldd	r25, Z+6	; 0x06
 47e:	9c 01       	movw	r18, r24
 480:	21 50       	subi	r18, 0x01	; 1
 482:	31 09       	sbc	r19, r1
 484:	8a 81       	ldd	r24, Y+2	; 0x02
 486:	9b 81       	ldd	r25, Y+3	; 0x03
 488:	fc 01       	movw	r30, r24
 48a:	36 83       	std	Z+6, r19	; 0x06
 48c:	25 83       	std	Z+5, r18	; 0x05
			if(tsk->toGo == 0){
 48e:	8a 81       	ldd	r24, Y+2	; 0x02
 490:	9b 81       	ldd	r25, Y+3	; 0x03
 492:	fc 01       	movw	r30, r24
 494:	85 81       	ldd	r24, Z+5	; 0x05
 496:	96 81       	ldd	r25, Z+6	; 0x06
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	51 f4       	brne	.+20     	; 0x4b0 <__stack+0x51>
				tsk->ready++;
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	9b 81       	ldd	r25, Y+3	; 0x03
 4a0:	fc 01       	movw	r30, r24
 4a2:	82 81       	ldd	r24, Z+2	; 0x02
 4a4:	28 2f       	mov	r18, r24
 4a6:	2f 5f       	subi	r18, 0xFF	; 255
 4a8:	8a 81       	ldd	r24, Y+2	; 0x02
 4aa:	9b 81       	ldd	r25, Y+3	; 0x03
 4ac:	fc 01       	movw	r30, r24
 4ae:	22 83       	std	Z+2, r18	; 0x02

ISR(TIMER0_COMP_vect){
//ISR(TIMER0_OVF_vect){
	uint8_t i;
	Task * tsk;
	for(i = 0; i < TASK_COUNT; i++){
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
 4b4:	89 83       	std	Y+1, r24	; 0x01
 4b6:	80 91 60 00 	lds	r24, 0x0060
 4ba:	99 81       	ldd	r25, Y+1	; 0x01
 4bc:	98 17       	cp	r25, r24
 4be:	08 f4       	brcc	.+2      	; 0x4c2 <__stack+0x63>
 4c0:	95 cf       	rjmp	.-214    	; 0x3ec <__vector_19+0x28>
			if(tsk->toGo == 0){
				tsk->ready++;
			}
		}
	}	
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	ff 91       	pop	r31
 4ce:	ef 91       	pop	r30
 4d0:	9f 91       	pop	r25
 4d2:	8f 91       	pop	r24
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	00 92 5f 00 	sts	0x005F, r0
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <_exit>:
 4e4:	f8 94       	cli

000004e6 <__stop_program>:
 4e6:	ff cf       	rjmp	.-2      	; 0x4e6 <__stop_program>
